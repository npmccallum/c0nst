name: CI

on:
  push:
    branches: main
  pull_request:
    branches: main

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - version: "1.65" # MSRV
            features: ""
          - version: stable
            features: ""
          - version: nightly
            features: ""
          - version: nightly
            features: "nightly"
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust.version }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.rust.version }}-${{ matrix.rust.features }}

      - name: Check cargo fmt
        if: matrix.rust.version == 'stable' && matrix.rust.features == ''
        run: |
          rustup component add rustfmt
          cargo fmt --all -- --check

      - name: Run cargo check
        run:
          cargo check --all-targets ${{ matrix.rust.features &&
          format('--features {0}', matrix.rust.features) || '' }}

      - name: Run tests
        run:
          cargo test ${{ matrix.rust.features && format('--features {0}',
          matrix.rust.features) || '' }}

      - name: Run doc tests
        run:
          cargo test --doc ${{ matrix.rust.features && format('--features {0}',
          matrix.rust.features) || '' }}

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run clippy (no features)
        run: cargo clippy --all-targets -- -D warnings

      - name: Run clippy (with nightly feature)
        run: cargo clippy --all-targets --features nightly -- -D warnings

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check documentation (no features)
        run: cargo doc --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: -D warnings

      - name: Check documentation (with nightly feature)
        run: cargo doc --no-deps --document-private-items --features nightly
        env:
          RUSTDOCFLAGS: -D warnings

  msrv:
    name: MSRV Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust MSRV
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "1.62"

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: msrv-1.62

      # Use the MSRV-specific Cargo.lock if it exists
      - name: Use MSRV Cargo.lock
        run: |
          if [ -f "Cargo.lock-ignored-for-cargo-msrv" ]; then
            cp Cargo.lock-ignored-for-cargo-msrv Cargo.lock
          fi

      - name: Check MSRV compatibility
        run: cargo check --all-targets

      - name: Test MSRV compatibility
        run: cargo test

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Run coverage
        run:
          cargo tarpaulin --verbose --all-features --workspace --timeout 120
          --out xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./cobertura.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  publish-dry-run:
    name: Publish Dry Run
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check if publishable
        run: cargo publish --dry-run
